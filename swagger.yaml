swagger: "2.0"
info:
  description: "Star Wars API"
  version: "1.0.0"
  title: "swapi"
host: "localhost"
basePath: "/api"
schemes:
  - "http"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /v1/species/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - "Species"
      summary: "Retourne une espèce avec son identifiant"
      description: ""
      operationId: "getSpecie"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "return specie's Id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Non trouvé"

  /v1/species/:
    get:
      security:
        - Bearer: []
      tags:
        - "Species"
      summary: "Return all species"
      description: ""
      operationId: "getSpecies"
      produces:
        - "application/json"
      responses:
        "404":
          description: "Non trouvé"

  /v1/people/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - "People"
      summary: "Retourne une personne avec son identifiant"
      description: ""
      operationId: "getPeople"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "people's Id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Non trouvé"
  /v1/people/:
    get:
      security:
        - Bearer: []
      tags:
        - "People"
      summary: "Return all people"
      description: ""
      operationId: "getPeoples"
      produces:
        - "application/json"
      responses:
        "404":
          description: "Non trouvé"

  /v1/vehicle/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - "Vehicule"
      summary: "Return Vehicles's Id"
      description: ""
      operationId: "getVehicule"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Vehicles's Id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Non trouvé"

  /v1/vehicle/:
    get:
      security:
        - Bearer: []
      tags:
        - "Vehicule"
      summary: "Return Vehicles"
      description: ""
      operationId: "getVehicules"
      produces:
        - "application/json"
      responses:
        "404":
          description: "Non trouvé"

  /v1/films/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - "Films"
      summary: "Return film's Id"
      description: ""
      operationId: "getFilm"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "film's Id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Film"
        "400":
          description: "Invalid status value"

  /v1/films/:
    get:
      security:
        - Bearer: []
      tags:
        - "Films"
      summary: "Return films"
      description: ""
      operationId: "getFilms"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Film"
        "400":
          description: "Invalid status value"
  /v1/planets/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - "Planets"
      summary: "Return Planet's Id"
      description: ""
      operationId: "getPlanet"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Planet's Id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "récupération réussie"
          schema:
            type: "string"
            items:
              $ref: "#/definitions/Planet"

  /v1/planets/:
    get:
      security:
        - Bearer: []
      tags:
        - "Planets"
      summary: "Return Planets"
      description: ""
      operationId: "getPlanets"
      produces:
        - "application/json"
      responses:
        "200":
          description: "récupération réussie"
          schema:
            type: "string"
            items:
              $ref: "#/definitions/Planet"
  /v1/starship/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - "Startships"
      summary: "Return Starships's Id"
      description: ""
      operationId: "getStartship"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Starships's Id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "récupération réussie"
          schema:
            type: "string"
            items:
              $ref: "#/definitions/Starship"

  /v1/starship/:
    get:
      security:
        - Bearer: []
      tags:
        - "Startships"
      summary: "Return Starships"
      description: ""
      operationId: "getStartships"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful catch"
          schema:
            type: "string"
            items:
              $ref: "#/definitions/Starship"
  /auth/register:
    post:
      tags:
        - "User"
      summary: "Create User"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "created user"
  /auth/login:
    post:
      tags:
        - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"

  /auth/logout:
    post:
			security:
        - Bearer: []
      tags:
        - "User"
      summary: "disconnecting from an account voluntarily"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful logout"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"

  /auth/refresh:
    post:
			security:
        - Bearer: []
      tags:
        - "User"
      summary: "disconnecting from an account voluntarily"
      description: ""
      operationId: "refreshToken"
      produces:
        - "application/json"
      responses:
        "200":
          description: "new token"
          schema:
            type: "string"
        "400":
          description: "Bad request"

  /auth/user-profile:
    post:
      security:
        - Bearer: []
      tags:
        - "User"
      summary: "access to user profile"
      description: ""
      operationId: "userProfile"
      produces:
        - "application/json"
      responses:
        "200":
          description: "new token"
          schema:
            type: "string"
        "400":
          description: "Bad request"

definitions:
  Starship:
    type: "object"
    properties:
      name:
        type: "string"
      model:
        type: "string"
      manufacturer:
        type: "string"
      cost_in_credits:
        type: "integer"
      length:
        type: "string"
      max_atmosphering_speed:
        type: "string"
      crew:
        type: "string"
      passengers:
        type: "string"
      cargo_capacity:
        type: "string"
      consumables:
        type: "string"
      hyperdrive_rating:
        type: "string"
      mglt:
        type: "string"
      starship_class:
        type: "string"
      pilots:
        type: array
        items:
          $ref: "#/definitions/User"
      films:
        type: array
        items:
          $ref: "#/definitions/Film"
      created:
        type: "string"
        format: date-time
      edited:
        type: "string"
        format: date-time
      url:
        type: "string"
  Film:
    type: "object"
    properties:
      title:
        type: "string"
      episode_id:
        type: "integer"
      opening_crawl:
        type: "string"
      director:
        type: "string"
      producer:
        type: "string"
      release_date:
        type: "string"
        format: date
      characters:
        type: array
        items:
          $ref: "#/definitions/People"
      planets:
        type: array
        items:
          $ref: "#/definitions/Planet"
      starships:
        type: array
        items:
          $ref: "#/definitions/Starship"
      vehicles:
        type: array
        items:
          $ref: "#/definitions/Vehicle"
      species:
        type: array
        items:
          $ref: "#/definitions/Specie"
      created:
        type: "string"
        format: date-time
      edited:
        type: "string"
        format: date-time
      url:
        type: "string"
  Planet:
    type: "object"
    properties:
      name:
        type: "string"
      rotation_period:
        type: "string"
      orbital_period:
        type: "string"
      diameter:
        type: "string"
      climate:
        type: "string"
      gravity:
        type: "string"
      terrain:
        type: "string"
      surface_water:
        type: "string"
      population:
        type: "string"
      residents:
        type: array
        items:
          $ref: "#/definitions/People"
      films:
        type: array
        items:
          $ref: "#/definitions/Film"
      created:
        type: "string"
        format: date-time
      edited:
        type: "string"
        format: date-time
      url:
        type: "string"
  Vehicle:
    type: "object"
    properties:
      name:
        type: "string"
      model:
        type: "string"
      manufacturer:
        type: "string"
      cost_in_credits:
        type: "string"
      length:
        type: "string"
      max_atmosphering_speed:
        type: "string"
      crew:
        type: "string"
      passengers:
        type: "string"
      cargo_capacity:
        type: "string"
      consumables:
        type: "string"
      vehicle_class:
        type: "string"
      pilots:
        type: array
        items:
          $ref: "#/definitions/People"
      films:
        type: array
        items:
          $ref: "#/definitions/Film"
      created:
        type: "string"
        format: date-time
      edited:
        type: "string"
        format: date-time
      url:
        type: "string"
  People:
    type: "object"
    properties:
      name:
        type: "string"
      height:
        type: "string"
      mass:
        type: "string"
      hair_color:
        type: "string"
      skin_color:
        type: "string"
      eye_color:
        type: "string"
      birth_year:
        type: "string"
      gender:
        type: "string"
      homeworld:
        type: "string"
      films:
        type: array
        items:
          $ref: "#/definitions/Film"
      species:
        type: array
        items:
          $ref: "#/definitions/Specie"
      vehicle:
        type: array
        items:
          $ref: "#/definitions/Vehicle"
      starships:
        type: array
        items:
          $ref: "#/definitions/Starship"
      created:
        type: "string"
        format: date-time
      edited:
        type: "string"
        format: date-time
      url:
        type: "string"
  Specie:
    type: "object"
    properties:
      name:
        type: "string"
      classification:
        type: "string"
      designation:
        type: "string"
      average_height:
        type: "string"
      skin_color:
        type: "string"
      hair_color:
        type: "string"
      eye_colors:
        type: "string"
      average_lifespan:
        type: "string"
      homeworld:
        type: "string"
      people:
        type: array
        items:
          $ref: "#/definitions/People"
      films:
        type: array
        items:
          $ref: "#/definitions/Film"
      created:
        type: "string"
        format: date-time
      edited:
        type: "string"
        format: date-time
      url:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
